// <auto-generated />
using System;
using CinemaClix.ApplicationDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaClix.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240209144856_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaClix.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A bachelor party gone wrong.",
                            Genre = "Comedy",
                            Image = "hangover.jpg",
                            ReleaseDate = new DateTime(2009, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Hangover"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Based on the true case files of paranormal investigators.",
                            Genre = "Horror",
                            Image = "conjuring.jpg",
                            ReleaseDate = new DateTime(2013, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Conjuring"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A tale of love, wealth, and tragedy in the Roaring Twenties.",
                            Genre = "Romance",
                            Image = "great_gatsby.jpg",
                            ReleaseDate = new DateTime(2013, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A high-octane post-apocalyptic action film.",
                            Genre = "Action",
                            Image = "mad_max.jpg",
                            ReleaseDate = new DateTime(2015, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mad Max: Fury Road"
                        },
                        new
                        {
                            Id = 5,
                            Description = "An animated underwater adventure to find a lost son.",
                            Genre = "Animation",
                            Image = "finding_nemo.jpg",
                            ReleaseDate = new DateTime(2003, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Finding Nemo"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A heartwarming love story across decades.",
                            Genre = "Drama",
                            Image = "notebook.jpg",
                            ReleaseDate = new DateTime(2004, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Notebook"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A dystopian future where artificial beings question their existence.",
                            Genre = "Science Fiction",
                            Image = "blade_runner.jpg",
                            ReleaseDate = new DateTime(1982, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Blade Runner"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A fairy tale adventure with love, humor, and sword fights.",
                            Genre = "Fantasy",
                            Image = "princess_bride.jpg",
                            ReleaseDate = new DateTime(1987, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Princess Bride"
                        },
                        new
                        {
                            Id = 9,
                            Description = "An astronaut's struggle for survival on Mars.",
                            Genre = "Adventure",
                            Image = "martian.jpg",
                            ReleaseDate = new DateTime(2015, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Martian"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A psychological thriller set on an eerie island.",
                            Genre = "Mystery",
                            Image = "shutter_island.jpg",
                            ReleaseDate = new DateTime(2010, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Shutter Island"
                        });
                });

            modelBuilder.Entity("CinemaClix.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GmailAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SubscriptionPlans", b =>
                {
                    b.Property<int>("SubscriptionPlansId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionPlansId"));

                    b.Property<string>("PlanPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionPlansId");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            SubscriptionPlansId = 1,
                            PlanPrice = "$9.99",
                            PlanType = "Basic"
                        },
                        new
                        {
                            SubscriptionPlansId = 2,
                            PlanPrice = "$14.99",
                            PlanType = "Standard"
                        },
                        new
                        {
                            SubscriptionPlansId = 3,
                            PlanPrice = "$19.99",
                            PlanType = "Premium"
                        });
                });

            modelBuilder.Entity("Subscriptions", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int>("SubscriptionPlansId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("SubscriptionPlansId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Subscriptions", b =>
                {
                    b.HasOne("SubscriptionPlans", "SubscriptionPlans")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaClix.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlans");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaClix.Models.User", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
